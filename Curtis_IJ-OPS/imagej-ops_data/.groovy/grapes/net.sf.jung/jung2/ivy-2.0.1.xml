<?xml version="1.0" encoding="UTF-8"?>
<ivy-module version="2.0" xmlns:m="http://ant.apache.org/ivy/maven">
	<info organisation="net.sf.jung"
		module="jung2"
		revision="2.0.1"
		status="release"
		publication="20160120071554"
	>
		<license name="The BSD License" url="http://jung.sourceforge.net/license.txt" />
		<description homepage="http://jung.sourceforge.net/site">
		JUNG the Java Universal Network/Graph Framework--is a software
		library that provides a common and extendible language for the
		modeling, analysis, and visualization of data that can be
		represented as a graph or network. It is written in Java, which
		allows JUNG-based applications to make use of the extensive
		built-in capabilities of the Java API, as well as those of other
		existing third-party Java libraries. The JUNG architecture is
		designed to support a variety of representations of entities and
		their relations, such as directed and undirected graphs,
		multi-modal graphs, graphs with parallel edges, and hypergraphs.
		It provides a mechanism for annotating graphs, entities, and
		relations with metadata. This facilitates the creation of
		analytic tools for complex data sets that can examine the
		relations between entities as well as the metadata attached to
		each entity and relation. The current distribution of JUNG
		includes implementations of a number of algorithms from graph
		theory, data mining, and social network analysis, such as
		routines for clustering, decomposition, optimization, random
		graph generation, statistical analysis, and calculation of
		network distances, flows, and importance measures (centrality,
		PageRank, HITS, etc.). JUNG also provides a visualization
		framework that makes it easy to construct tools for the
		interactive exploration of network data. Users can use one of
		the layout algorithms provided, or use the framework to create
		their own custom layouts. In addition, filtering mechanisms are
		provided which allow users to focus their attention, or their
		algorithms, on specific portions of the graph.
		</description>
		<m:maven.plugins>org.apache.maven.plugins__maven-compiler-plugin__2.0|org.apache.maven.plugins__maven-source-plugin__null</m:maven.plugins>
	</info>
	<configurations>
		<conf name="default" visibility="public" description="runtime dependencies and master artifact can be used with this conf" extends="runtime,master"/>
		<conf name="master" visibility="public" description="contains only the artifact published by this module itself, with no transitive dependencies"/>
		<conf name="compile" visibility="public" description="this is the default scope, used if none is specified. Compile dependencies are available in all classpaths."/>
		<conf name="provided" visibility="public" description="this is much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive."/>
		<conf name="runtime" visibility="public" description="this scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath." extends="compile"/>
		<conf name="test" visibility="private" description="this scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases." extends="runtime"/>
		<conf name="system" visibility="public" description="this scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository."/>
		<conf name="sources" visibility="public" description="this configuration contains the source artifact of this module, if any."/>
		<conf name="javadoc" visibility="public" description="this configuration contains the javadoc artifact of this module, if any."/>
		<conf name="optional" visibility="public" description="contains all optional dependencies"/>
	</configurations>
	<publications>
	</publications>
	<dependencies>
		<dependency org="junit" name="junit" rev="3.8.1" force="true" conf="test->runtime(*),master(*)"/>
	</dependencies>
</ivy-module>
